---
name: Release - GitHub

on:
  pull_request:
    types: [closed ]
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      # PREPARE
      - name: Check whether secrets exist
        if: github.ref == 'refs/heads/main'
        id: secret-presence
        run: |
          [ ! -z "${{ secrets.CXNG_GHCR_PAT }}" ] && echo "::set-output name=CXNG_GHCR_PAT::true"
          exit 0

      - uses: actions/checkout@v2

      # RELEASE VERSION
      -
        name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      -
        name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      -
        name: Output release version
        run: |
          echo "::set-output name=RELEASE_VERSION::${{ env.RELEASE_VERSION }}"

      # BUILD & TEST
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Run tests
        run: mvn -B test --file pom.xml

      - name: Build Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: ghcr.io/catenax-ng/product-vcissuer/vcissuer:latest

      # GIT TAG
      - name: Create Release Tag
        run: |
          # Prepare git env
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

          # informative
          git branch -a
          git tag

          # Create & push tag
          git tag --force ${{ env.RELEASE_VERSION }}
          git push --force origin ${{ env.RELEASE_VERSION }}

      # GITHUB RELEASE
      - name: Create Release Tag
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      # PR TO MERGE RELEASE BACK INTO DEVELOP
      -
        name: Create pull request
        uses: thomaseizinger/create-pull-request@1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{ env.RELEASE_VERSION }}
          base: develop
          title: Release version ${{ env.RELEASE_VERSION }} into develop
          reviewers: ${{ github.actor }}
          body: |-
            This PR was created in response to a manual trigger of the [release workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            The changelog was updated and versions have been bumped in [commit ${{ steps.make-commit.outputs.commit }}](${{ steps.make-commit.outputs.commit }}).

            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.

      # RELEASE REPOSITORY DISPATCH
      - name: Trigger Artifact Release
        if: success()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CXNG_GHCR_PAT }}
          repository: ${{ github.repository }}
          event-type: trigger-workflow-release
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "version": "${{ env.RELEASE_VERSION }}" }'
